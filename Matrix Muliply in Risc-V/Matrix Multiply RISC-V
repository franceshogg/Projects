.globl matmul

.text
# =======================================================
# FUNCTION: Matrix Multiplication of 2 integer matrices
#   d = matmul(m0, m1)
# Arguments:
#   a0 (int*)  is the pointer to the start of m0
#   a1 (int)   is the # of rows (height) of m0
#   a2 (int)   is the # of columns (width) of m0
#   a3 (int*)  is the pointer to the start of m1
#   a4 (int)   is the # of rows (height) of m1
#   a5 (int)   is the # of columns (width) of m1
#   a6 (int*)  is the pointer to the the start of d
# Returns:
#   None (void), sets d = matmul(m0, m1)
# Exceptions:
#   Make sure to check in top to bottom order!
#   - If the dimensions of m0 do not make sense,
#     this function terminates the program with exit code 38
#   - If the dimensions of m1 do not make sense,
#     this function terminates the program with exit code 38
#   - If the dimensions of m0 and m1 don't match,
#     this function terminates the program with exit code 38
# =======================================================
matmul:
    
    # Error checks
    addi t0 x0 1
    bne a2 a4 error_code
    blt a1 t0 error_code
    blt a2 t0 error_code
    blt a4 t0 error_code
    blt a5 t0 error_code
    # Prologue
#REDO START
prologue:
    addi sp sp -52
    sw s0 0(sp)
    sw s1 4(sp)
    sw s2 8(sp)
    sw s3 12(sp)
    sw s4 16(sp)
    sw s5 20(sp)
    sw s6 24(sp)
    sw s7 28(sp)
    sw s8 32(sp)
    sw s9 36(sp)
    sw s10 40(sp)
    sw s11 44(sp)
    sw ra 48(sp)
    
    #end checker
    mul s10 a1 a5
    
    li s11 0 #d-element counter
    li s0 0 #i = 0 (outer-loop counter)
outer_loop_start:
    
inner_loop_start: 
    
    #save arguments
    addi sp sp -28
    sw a0 0(sp)
    sw a1 4(sp)
    sw a2 8(sp)
    sw a3 12(sp)
    sw a4 16(sp)
    sw a5 20(sp)
    sw a6 24(sp)
    
    li s2 4 #s2 = 4
    mul s3 s2 s0 #s3 = 4*s0
    add a1 a3 s3 #a1 = pointer to start of m1 + 4*s0
    li a3 1
    mv a4 a5 #a4 = cols of m1
    jal ra dot
    mv s3 a0 #s3 = result of dot
    #load back argument registers
    lw a0 0(sp)
    lw a1 4(sp)
    lw a2 8(sp)
    lw a3 12(sp)
    lw a4 16(sp)
    lw a5 20(sp)
    lw a6 24(sp)
    addi sp sp 28
    
    mul s5 s11 s2 #d-element counter * 4
    add s5 s5 a6 #go to where in a6 to add the result #WAS ADD A6 S5 A6
    sw s3 0(s5) #WAS SW T2 0(A6)
    
    addi s11 s11 1 #increment d-element counter
    
inner_loop_end:
    addi s0 s0 1 #increment i
    beq s0 a5 outer_loop_end
    j inner_loop_start

outer_loop_end:
    li s2 4
    mul s4 s2 a2 #multiply m0 cols by 4
    add a0 a0 s4 #increment start of m0
    li s0 0 #reset i counter
    bne s11 s10 outer_loop_start
        
    # Epilogue
    lw s0 0(sp)
    lw s1 4(sp)
    lw s2 8(sp)
    lw s3 12(sp)
    lw s4 16(sp)
    lw s5 20(sp)
    lw s6 24(sp)
    lw s7 28(sp)
    lw s8 32(sp)
    lw s9 36(sp)
    lw s10 40(sp)
    lw s11 44(sp)
    lw ra 48(sp)
    addi sp sp 52
    
    #li a0 10    
    ret
error_code: 
    li a0 38
    j exit
#REDO END
