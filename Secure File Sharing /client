package client

// CS 161 Project 2

// Only the following imports are allowed! ANY additional imports
// may break the autograder!
// - bytes
// - encoding/hex
// - encoding/json
// - errors
// - fmt
// - github.com/cs161-staff/project2-userlib
// - github.com/google/uuid
// - strconv
// - strings

import (
	//"encoding/binary"
	//"encoding/binary"

	"encoding/json"
	"strings"

	userlib "github.com/cs161-staff/project2-userlib"
	"github.com/google/uuid"

	// hex.EncodeToString(...) is useful for converting []byte to string

	// Useful for string manipulation
	//"strings"

	// Useful for formatting strings (e.g. `fmt.Sprintf`).
	"fmt"

	// Useful for creating new error messages to return using errors.New("...")
	"errors"

	// Optional.
	"strconv"

	_ "strconv"
)

// This serves two purposes: it shows you a few useful primitives,
// and suppresses warnings for imports not being used. It can be
// safely deleted!
func someUsefulThings() {

	// Creates a random UUID.
	randomUUID := uuid.New()

	// Prints the UUID as a string. %v prints the value in a default format.
	// See https://pkg.go.dev/fmt#hdr-Printing for all Golang format string flags.
	userlib.DebugMsg("Random UUID: %v", randomUUID.String())

	// Creates a UUID deterministically, from a sequence of bytes.
	hash := userlib.Hash([]byte("user-structs/alice"))
	deterministicUUID, err := uuid.FromBytes(hash[:16])
	if err != nil {
		// Normally, we would `return err` here. But, since this function doesn't return anything,
		// we can just panic to terminate execution. ALWAYS, ALWAYS, ALWAYS check for errors! Your
		// code should have hundreds of "if err != nil { return err }" statements by the end of this
		// project. You probably want to avoid using panic statements in your own code.
		panic(errors.New("An error occurred while generating a UUID: " + err.Error()))
	}
	userlib.DebugMsg("Deterministic UUID: %v", deterministicUUID.String())

	// Declares a Course struct type, creates an instance of it, and marshals it into JSON.
	type Course struct {
		name      string
		professor []byte
	}

	course := Course{"CS 161", []byte("Nicholas Weaver")}
	courseBytes, err := json.Marshal(course)
	if err != nil {
		panic(err)
	}

	userlib.DebugMsg("Struct: %v", course)
	userlib.DebugMsg("JSON Data: %v", courseBytes)

	// Generate a random private/public keypair.
	// The "_" indicates that we don't check for the error case here.
	var pk userlib.PKEEncKey
	var sk userlib.PKEDecKey
	pk, sk, _ = userlib.PKEKeyGen()
	userlib.DebugMsg("PKE Key Pair: (%v, %v)", pk, sk)

	// Here's an example of how to use HBKDF to generate a new key from an input key.
	// Tip: generate a new key everywhere you possibly can! It's easier to generate new keys on the fly
	// instead of trying to think about all of the ways a key reuse attack could be performed. It's also easier to
	// store one key and derive multiple keys from that one key, rather than
	originalKey := userlib.RandomBytes(16)
	derivedKey, err := userlib.HashKDF(originalKey, []byte("mac-key"))
	if err != nil {
		panic(err)
	}
	userlib.DebugMsg("Original Key: %v", originalKey)
	userlib.DebugMsg("Derived Key: %v", derivedKey)

	// A couple of tips on converting between string and []byte:
	// To convert from string to []byte, use []byte("some-string-here")
	// To convert from []byte to string for debugging, use fmt.Sprintf("hello world: %s", some_byte_arr).
	// To convert from []byte to string for use in a hashmap, use hex.EncodeToString(some_byte_arr).
	// When frequently converting between []byte and string, just marshal and unmarshal the data.
	//
	// Read more: https://go.dev/blog/strings

	// Here's an example of string interpolation!
	_ = fmt.Sprintf("%s_%d", "file", 1)
}

// This is the type definition for the User struct.
// A Go struct is like a Python or Java class - it can have attributes
// (e.g. like the Username attribute) and methods (e.g. like the StoreFile method below).
type User struct {
	Username            string
	Password            string
	OwnedFilesList      map[string]OwnedFile
	AccessibleFilesList map[string]uuid.UUID //Filename --> Invitation Pointer
	RSAPublicKey        userlib.PublicKeyType
	RSAPrivateKey       userlib.PrivateKeyType
	DSPublicKey         userlib.DSVerifyKey
	DSPrivateKey        userlib.DSSignKey
}

// STRUCTS I AM ADDING: file and invitation
type OwnedFile struct {
	Filename    string
	Loc         int
	Enckey      int
	Mackey      int
	Shared_with []string
}

type Invitation struct {
	Loc    int
	Enckey int
	Mackey int
	Sender string
}

type Fileinfo struct {
	Filename   string
	Filesize   int
	Shared_map map[string][]string
}

// MY HELPER FUNCTIONS!!
func AES_CTR_ENC(enc_key []byte, mac_key []byte, iv []byte, plaintext []byte) []byte {
	if len(enc_key) >= 32 {
		enc_key = enc_key[:32]
	}
	encryption := userlib.SymEnc(enc_key, iv, plaintext)
	hmac, _ := userlib.HMACEval(mac_key, encryption)
	return append(encryption, hmac...)
}
func AES_CTR_DEC(enc_key []byte, mac_key []byte, ciphertext []byte) ([]byte, error) {
	if len(enc_key) >= 32 {
		enc_key = enc_key[:32]
	}
	saved_mac := ciphertext[len(ciphertext)-64:]
	ciphertext = ciphertext[:len(ciphertext)-64]
	hmac, _ := userlib.HMACEval(mac_key, ciphertext)
	if !userlib.HMACEqual(hmac, saved_mac) {
		return []byte{}, errors.New("Mac doesn't match")
	}
	decryption := userlib.SymDec(enc_key, ciphertext)
	return decryption, nil
}
func compareBytes(a []byte, b []byte) bool {
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}
func make16Bytes(input string) string {
	if len(input) >= 16 {
		return input[:16]
	}
	pad := 16 - len(input)
	return input + strings.Repeat("\x00", pad)
}
func make16BytesByte(input []byte) []byte {
	if len(input) >= 16 {
		return input[:16]
	}
	pad := 16 - len(input)
	return append(input, make([]byte, pad)...)
}
func updateUser(userdata User) error {
	SaltForPassword := userlib.Hash([]byte(userdata.Username))
	if len(SaltForPassword) >= 8 {
		SaltForPassword = SaltForPassword[:8]
	}
	SaltForUsername := userlib.Hash([]byte(userdata.Password))
	if len(SaltForUsername) >= 8 {
		SaltForUsername = SaltForUsername[:8]
	}
	uuidKeyed := userlib.Argon2Key([]byte(userdata.Username), SaltForUsername, 16)
	uuidForUser, err := uuid.FromBytes(uuidKeyed)
	if err != nil {
		return errors.New("Error with FromBytes")
	}
	passwordArgon := userlib.Argon2Key([]byte(userdata.Password), SaltForPassword, 16)
	symEncKey := userlib.Argon2Key(passwordArgon, SaltForPassword, 16)
	iv := userlib.RandomBytes(16)
	plaintext, err := json.Marshal(userdata)
	if err != nil {
		return errors.New("can't marshal")
	}
	val := userlib.SymEnc(symEncKey, iv, plaintext)
	userlib.DatastoreSet(uuidForUser, val)
	return nil
}
func updateInvite(invite Invitation, pubKey userlib.PKEEncKey, UUID uuid.UUID) error {
	//Marshall and reencrypt invite
	inviteBytes, _ := json.Marshal(invite)
	hashedInvitation, err := userlib.PKEEnc(pubKey, inviteBytes)
	if err != nil {
		return err
	}
	userlib.DatastoreSet(UUID, hashedInvitation)
	return nil
}
func randomInteger() int {
	a := userlib.RandomBytes(16)
	ret := 0
	for _, v := range a {
		ret = (ret << 8) | int(v)
	}

	return ret
}
func intToByte(input int) []byte {
	strInput := strconv.Itoa(input)
	return []byte(strInput)
}
func intToString(input int) string {
	return strconv.Itoa(input)
}
func absVal(i int) int {
	if i < 0 {
		return -i
	}
	return i
}
func grabFileInfo(loc int) Fileinfo {
	fileInfoUUID, _ := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(loc + 1))))
	fileInfoBytes, _ := userlib.DatastoreGet(fileInfoUUID)
	SaltForPassword := userlib.Hash([]byte(intToString(loc)))
	if len(SaltForPassword) >= 8 {
		SaltForPassword = SaltForPassword[:8]
	}
	passwordArgon := userlib.Hash([]byte("FIILEINFO" + intToString(loc)))
	symEncKey := userlib.Argon2Key(passwordArgon, SaltForPassword, 16)
	fileInfoDec := userlib.SymDec(symEncKey, fileInfoBytes)
	fileInfo := new(Fileinfo)
	json.Unmarshal(fileInfoDec, &fileInfo)
	return *fileInfo
}
func updateFileInfo(fileInfo Fileinfo, loc int) error {
	fileInfoUUID, _ := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(loc + 1))))
	SaltForPassword := userlib.Hash([]byte(intToString(loc)))
	if len(SaltForPassword) >= 8 {
		SaltForPassword = SaltForPassword[:8]
	}
	passwordArgon := userlib.Hash([]byte("FIILEINFO" + intToString(loc)))
	symEncKey := userlib.Argon2Key(passwordArgon, SaltForPassword, 16)
	fileBytes, _ := json.Marshal(fileInfo)
	iv := userlib.RandomBytes(16)
	fileBytesEnc := userlib.SymEnc(symEncKey, iv, fileBytes)
	userlib.DatastoreSet(fileInfoUUID, fileBytesEnc)
	return nil
}
func contains(list []string, val string) bool {
	for _, item := range list {
		if item == val {
			return true
		}
	}
	return false
}
func getAccessList(fileinfo Fileinfo, owner string, revoked string, revoking bool) []string {
	accessList := []string{owner}
	stack := []string{owner}
	if revoking {
		accessList = []string{}
		stack = []string{}
	}
	seen := make(map[string]struct{})
	owner_shared := fileinfo.Shared_map[owner]
	for _, user := range owner_shared {
		if user != revoked {
			seen[user] = struct{}{}
			stack = append(stack, user)
			accessList = append(accessList, user)
		}
	}
	for len(stack) > 0 {
		currUser := stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		for _, value := range fileinfo.Shared_map[currUser] {
			if _, exists := seen[value]; !exists {
				if value != revoked {
					seen[value] = struct{}{}
					accessList = append(accessList, value)
					stack = append(stack, value)
				}
			}
		}
	}
	return accessList
}

// NOTE: The following methods have toy (insecure!) implementations.

func InitUser(username string, password string) (userdataptr *User, err error) {
	var userdata User

	//Ensure username is not empty
	if username == "" {
		return &userdata, errors.New("Empty username")
	}

	//Creating Salt
	SaltForPassword := userlib.Hash([]byte(username))
	if len(SaltForPassword) >= 8 {
		SaltForPassword = SaltForPassword[:8]
	}
	SaltForUsername := userlib.Hash([]byte(password))
	if len(SaltForUsername) >= 8 {
		SaltForUsername = SaltForUsername[:8]
	}

	//Instantiating fields
	userdata.Username = username
	userdata.Password = password
	userdata.OwnedFilesList = make(map[string]OwnedFile)
	userdata.AccessibleFilesList = make(map[string]uuid.UUID)
	userdata.RSAPublicKey, userdata.RSAPrivateKey, err = userlib.PKEKeyGen()
	if err != nil {
		return &userdata, errors.New("Couldn't generate PKEKeyGen()")
	}
	userdata.DSPrivateKey, userdata.DSPublicKey, err = userlib.DSKeyGen()
	if err != nil {
		return &userdata, errors.New("Couldn't generate DSKeyGen()")
	}

	//Store password in datastore
	passwordArgon := userlib.Argon2Key([]byte(password), SaltForPassword, 16)
	extendUsername := make16Bytes(username)
	usernameToStore, _ := uuid.FromBytes([]byte(extendUsername))
	userlib.DatastoreSet(usernameToStore, passwordArgon)

	//Store RSAPublicKey in DataStore
	userlib.KeystoreSet(userdata.Username, userdata.RSAPublicKey)

	//Store DSPublicKey in Datastore
	userlib.KeystoreSet("FRAN"+userdata.Username, userdata.DSPublicKey)

	//Create uuid for User for storing
	uuidKeyed := userlib.Argon2Key([]byte(username), SaltForUsername, 16)
	uuidForUser, err := uuid.FromBytes(uuidKeyed)
	if err != nil {
		return &userdata, errors.New("Error with FromBytes")
	}

	//Encrypt User and save in Datastore, ensuring its not already there
	symEncKey := userlib.Argon2Key(passwordArgon, SaltForPassword, 16)
	iv := userlib.RandomBytes(16)
	plaintext, err := json.Marshal(userdata)
	if err != nil {
		return &userdata, errors.New("Error with marshal")
	}
	val := userlib.SymEnc(symEncKey, iv, plaintext)
	_, ok := userlib.DatastoreGet(uuidForUser)
	if ok {
		return &userdata, errors.New("User already exists")
	}
	userlib.DatastoreSet(uuidForUser, val)

	//Return a pointer to the userdata
	return &userdata, nil
}

func GetUser(username string, password string) (userdataptr *User, err error) {
	var userdata User

	//Recreate salt and password to help recreate uuid of user
	SaltForPassword := userlib.Hash([]byte(username))
	if len(SaltForPassword) >= 8 {
		SaltForPassword = SaltForPassword[:8]
	}
	SaltForUsername := userlib.Hash([]byte(password))
	if len(SaltForUsername) >= 8 {
		SaltForUsername = SaltForUsername[:8]
	}

	//Recreate uuid from salt and argon2keyPassword
	argon2keyPassword := userlib.Argon2Key([]byte(password), SaltForPassword, 16)
	uuidForUser, _ := uuid.FromBytes(userlib.Argon2Key([]byte(username), SaltForUsername, 16))

	//Check to see that passwords match
	extendUsername := make16Bytes(username)
	storedUser, _ := uuid.FromBytes([]byte(extendUsername))
	storedPassword, ok := userlib.DatastoreGet(storedUser)
	if !ok {
		return &userdata, errors.New("There is no user there")
	}
	if !compareBytes(storedPassword, argon2keyPassword) { //Passwords don't match
		return &userdata, errors.New("Wrong password")
	}

	//Get user from the Datastore
	storedUserdata, ok := userlib.DatastoreGet(uuidForUser)
	if !ok {
		return &userdata, errors.New("No user exists")
	}

	//Decrypt user by recreating the Symmetric Encryption Key
	symEncKey := userlib.Argon2Key([]byte(argon2keyPassword), SaltForPassword, 16)
	if symEncKey == nil {
		return &userdata, errors.New("Error with Argon2Key")
	}
	storedUserdataDec := userlib.SymDec(symEncKey, storedUserdata)

	//Unmarshal decrypted user into userdata
	err = json.Unmarshal(storedUserdataDec, &userdata) //GETTING ERROR HERE
	if err != nil {
		return &userdata, errors.New("Error with unmarshal")
	}

	//return pointer to userdata
	userdataptr = &userdata
	return userdataptr, nil
}

func (userdata *User) StoreFile(filename string, content []byte) (err error) {
	//Get most recent userdata
	userdata, _ = GetUser(userdata.Username, userdata.Password)

	//Create OwnedFile and fill out fields
	fileToStore := new(OwnedFile)
	fileToStore.Filename = filename
	fileToStore.Loc = absVal(randomInteger())
	fileToStore.Enckey = absVal(randomInteger())
	fileToStore.Mackey = absVal(randomInteger())

	//Store Fileinfo at fireToStore.Loc + 1
	fileInfoUUID, _ := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(fileToStore.Loc + 1))))

	fileInfo := new(Fileinfo)
	fileInfo.Filename = filename
	fileInfo.Filesize = len(content)
	fileInfo.Shared_map = make(map[string][]string)
	fileBytes, err := json.Marshal(fileInfo)
	if err != nil {
		return err
	}
	SaltForPassword := userlib.Hash([]byte(intToString(fileToStore.Loc)))
	if len(SaltForPassword) >= 8 {
		SaltForPassword = SaltForPassword[:8]
	}
	passwordArgon := userlib.Hash([]byte("FIILEINFO" + intToString(fileToStore.Loc)))
	symEncKey := userlib.Argon2Key(passwordArgon, SaltForPassword, 16)
	iv := userlib.RandomBytes(16)
	fileInfoEnc := userlib.SymEnc(symEncKey, iv, fileBytes)
	userlib.DatastoreSet(fileInfoUUID, fileInfoEnc)

	//Add OwnedFile to user's OwnedFilesList and update user
	userdata.OwnedFilesList[filename] = *fileToStore
	updateUser(*userdata)

	//Create contentSize, chunkSize, numChunks variables
	chunkSize := 18
	contentSize := len(content)
	numChunks := contentSize / chunkSize

	//Create for-loop of size numChunks
	for currChunk := 1; currChunk < numChunks+1; currChunk++ {
		//For each chunk, store UUID of chunk with chunk in Datastore

		//Create UUID of chunk
		chunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(fileToStore.Loc * currChunk))))
		if err != nil {
			return err
		}

		//Encrypt chunk using enckey, mackey, and iv
		enckey := make16BytesByte(userlib.Hash(intToByte(fileToStore.Enckey * currChunk)))
		mackey := make16BytesByte(userlib.Hash(intToByte(fileToStore.Mackey * currChunk))) //TOOK OUT AES HERE

		iv := userlib.RandomBytes(16)
		startIndex := chunkSize * (currChunk - 1)
		endIndex := startIndex + chunkSize
		chunk := content
		if endIndex < len(content) && startIndex < len(content) {
			chunk = content[startIndex:endIndex]
		}
		encryptedChunk := AES_CTR_ENC(enckey, mackey, iv, chunk)

		//Save chunk in datatstore
		userlib.DatastoreSet(chunkUUID, encryptedChunk)
	}
	//Add all the leftover bytes as the final chunk

	//Create UUID of final chunk
	lastChunkNum := numChunks + 1
	chunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(fileToStore.Loc * lastChunkNum))))
	if err != nil {
		return err
	}

	//Encrypt final chunk using enckey, mackey, and iv
	enckey := make16BytesByte(userlib.Hash(intToByte(fileToStore.Enckey * lastChunkNum)))
	mackey := make16BytesByte(userlib.Hash(intToByte(fileToStore.Mackey * lastChunkNum)))
	iv = userlib.RandomBytes(16)
	startIndex := chunkSize * (lastChunkNum - 1)
	chunk := content
	if startIndex < len(content) {
		chunk = content[startIndex:]
	}
	encryptedChunk := AES_CTR_ENC(enckey, mackey, iv, chunk)

	//Save final chunk in datatstore
	userlib.DatastoreSet(chunkUUID, encryptedChunk)

	return nil
}

func (userdata *User) AppendToFile(filename string, content []byte) error {
	//Get most recent userdata
	userdata, _ = GetUser(userdata.Username, userdata.Password)

	//Check if file is in userdata's OwnedFileslist/AccessibleFilesList.
	//If it's there, return AppendToOwnedFile//AppendToAccessibleFile function
	if _, exists := userdata.OwnedFilesList[filename]; exists {
		return userdata.AppendToOwnedFile(filename, content)
	} else if _, exists := userdata.AccessibleFilesList[filename]; exists {
		return userdata.AppendToAccessibleFile(filename, content)
	} else {
		return errors.New("Caller does not have file")
	}
}

func (userdata *User) AppendToOwnedFile(filename string, content []byte) error {
	//Get fileToAppend from user's OwnedFilesList
	fileToAppend := userdata.OwnedFilesList[filename]

	//Grab fileInfo. Will need for originalContentSize
	fileInfo := grabFileInfo(fileToAppend.Loc)

	//Calculate originalContentSize, originalNumChunks, chunkSize
	originalContentSize := fileInfo.Filesize
	chunkSize := 18
	originalLastChunkNum := (originalContentSize / chunkSize) + 1 //2

	//Add new Filesize to fileInfo, reencrypt it, save to Datastore
	fileInfo.Filesize = originalContentSize + len(content)
	updateFileInfo(fileInfo, fileToAppend.Loc)

	//Calculate UUID of last chunk using originalNumChunks as currChunk
	lastChunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(fileToAppend.Loc * originalLastChunkNum))))
	if err != nil {
		return err
	}

	//Get the encrypted lastChunk from Datastore
	lastChunkEnc, ok := userlib.DatastoreGet(lastChunkUUID)
	if !ok {
		return errors.New("Couldn't get last chunk")
	}

	//Decrypt lastChunk
	enckey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Enckey * originalLastChunkNum)))
	mackey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Mackey * originalLastChunkNum)))
	//lastChunk := userlib.SymDec(enckey, lastChunkEnc) // TOOK OUT AES HERE
	lastChunk, err := AES_CTR_DEC(enckey, mackey, lastChunkEnc)
	if err != nil {
		return err
	}

	//Create variable "spaceLeft". Add "spaceLeft" bytes to lastChunk. Shrink content to exclude "spaceLeft" from front
	spaceLeft := chunkSize - len(lastChunk)
	if len(content) >= spaceLeft {
		lastChunk = append(lastChunk, content[:spaceLeft]...)
		content = content[spaceLeft:]
	} else {
		lastChunk = append(lastChunk, content...)
		content = []uint8{}
	}

	//Reencrypt lastChunk and add to Datastore
	iv := userlib.RandomBytes(16) //TOOK OUT AES HERE
	//lastChunkReEnc := userlib.SymEnc(enckey, iv, lastChunk) // TOOK OUT AES HERE
	lastChunkReEnc := AES_CTR_ENC(enckey, mackey, iv, lastChunk)
	userlib.DatastoreSet(lastChunkUUID, lastChunkReEnc)

	//Calculate newContentSize, numChunksLeft
	newContentSize := len(content)
	numChunksLeft := newContentSize / chunkSize

	//Create for loop, starting at originalNumChunks, ending at originalNumChunks + numChunksLeft
	for currChunk := originalLastChunkNum + 1; currChunk < originalLastChunkNum+1+numChunksLeft; currChunk++ {
		//Create new chunk UUID
		currChunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(fileToAppend.Loc * currChunk))))
		if err != nil {
			return err
		}

		//Encrypt chunk using enckey, mackey, and iv
		enckey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Enckey * currChunk)))
		mackey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Mackey * currChunk)))
		iv := userlib.RandomBytes(16)
		startIndex := chunkSize * (currChunk - 1)
		endIndex := startIndex + chunkSize
		chunk := content
		if endIndex < len(content) && startIndex < len(content) {
			chunk = content[startIndex:endIndex]
		}
		//encryptedChunk := userlib.SymEnc(enckey, iv, chunk) //
		encryptedChunk := AES_CTR_ENC(enckey, mackey, iv, chunk)

		//Save chunk in datatstore
		userlib.DatastoreSet(currChunkUUID, encryptedChunk)
	}

	//Add all the leftover bytes as the final chunk

	//Create UUID of final chunk
	newLastChunkIndex := originalLastChunkNum + numChunksLeft + 1
	chunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(fileToAppend.Loc * newLastChunkIndex))))
	if err != nil {
		return err
	}

	//Encrypt final chunk using enckey, mackey, and iv
	lastEnckey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Enckey * newLastChunkIndex)))
	lastMackey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Mackey * newLastChunkIndex))) //TOOK OUT AES HERE
	lastIv := userlib.RandomBytes(16)                                                               //TOOK OUT AES HERE
	chunk := content
	//encryptedChunk := userlib.SymEnc(lastEnckey, lastIv, chunk) // TOOK OUT AES HERE
	encryptedChunk := AES_CTR_ENC(lastEnckey, lastMackey, lastIv, chunk)

	//Save final chunk in datatstore
	userlib.DatastoreSet(chunkUUID, encryptedChunk)

	return nil
}

func (userdata *User) AppendToAccessibleFile(filename string, content []byte) error {
	//Get inviteUUID from user's AccessibleFilesList
	inviteUUID := userdata.AccessibleFilesList[filename]

	//Get invitation from Datastore
	inviteBytes, ok := userlib.DatastoreGet(inviteUUID)
	if !ok {
		return errors.New("You do not have access to this file")
	}

	//Remove signature
	inviteBytes = inviteBytes[:len(inviteBytes)-256]

	//Decrypt then unmarshall
	inviteDec, err := userlib.PKEDec(userdata.RSAPrivateKey, inviteBytes)
	if err != nil {
		return err
	}
	invite := new(Invitation)
	json.Unmarshal(inviteDec, &invite)

	fileToAppend := invite

	//Grab fileInfo. Will need for originalContentSize
	fileInfo := grabFileInfo(fileToAppend.Loc)

	//Calculate originalContentSize, originalNumChunks, chunkSize
	originalContentSize := fileInfo.Filesize
	chunkSize := 18
	originalLastChunkNum := (originalContentSize / chunkSize) + 1

	//Add new Filesize to fileInfo, reencrypt it, save to Datastore
	fileInfo.Filesize = originalContentSize + len(content)
	updateFileInfo(fileInfo, fileToAppend.Loc)

	//Calculate UUID of last chunk using originalNumChunks as currChunk
	lastChunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(fileToAppend.Loc * originalLastChunkNum))))
	if err != nil {
		return err
	}

	//Get the encrypted lastChunk from Datastore
	lastChunkEnc, ok := userlib.DatastoreGet(lastChunkUUID)
	if !ok {
		return errors.New("couldn't get last chunk")
	}

	//Decrypt lastChunk
	enckey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Enckey * originalLastChunkNum)))
	mackey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Mackey * originalLastChunkNum)))
	//lastChunk := userlib.SymDec(enckey, lastChunkEnc) // TOOK OUT AES HERE
	lastChunk, err := AES_CTR_DEC(enckey, mackey, lastChunkEnc)
	if err != nil {
		return err
	}

	//Create variable "spaceLeft". Add "spaceLeft" bytes to lastChunk. Shrink content to exclude "spaceLeft" from front
	spaceLeft := chunkSize - len(lastChunk)
	if len(content) >= spaceLeft {
		lastChunk = append(lastChunk, content[:spaceLeft]...)
		content = content[spaceLeft:]
	} else {
		lastChunk = append(lastChunk, content...)
		content = []uint8{}
	}

	//Reencrypt lastChunk and add to Datastore
	iv := userlib.RandomBytes(16)
	//lastChunkReEnc := userlib.SymEnc(enckey, iv, lastChunk) //TOOK OUT AES HERE
	lastChunkReEnc := AES_CTR_ENC(enckey, mackey, iv, lastChunk)
	userlib.DatastoreSet(lastChunkUUID, lastChunkReEnc)

	//Calculate newContentSize, numChunksLeft
	newContentSize := len(content)
	numChunksLeft := newContentSize / chunkSize

	//Create for loop, starting at originalNumChunks, ending at originalNumChunks + numChunksLeft
	for currChunk := originalLastChunkNum + 1; currChunk < originalLastChunkNum+1+numChunksLeft; currChunk++ {
		//Create new chunk UUID
		currChunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(fileToAppend.Loc * currChunk))))
		if err != nil {
			return err
		}

		//Encrypt chunk using enckey, mackey, and iv
		enckey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Enckey * currChunk)))
		mackey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Mackey * currChunk)))
		iv := userlib.RandomBytes(16)
		startIndex := chunkSize * (currChunk - 1)
		endIndex := startIndex + chunkSize
		chunk := content
		if endIndex < len(content) && startIndex < len(content) {
			chunk = content[startIndex:endIndex]
		}
		//encryptedChunk := userlib.SymEnc(enckey, iv, chunk) // TOOK OUT AES
		encryptedChunk := AES_CTR_ENC(enckey, mackey, iv, chunk)

		//Save chunk in datatstore
		userlib.DatastoreSet(currChunkUUID, encryptedChunk)
	}

	//Add all the leftover bytes as the final chunk

	//Create UUID of final chunk
	newLastChunkIndex := originalLastChunkNum + 1 + numChunksLeft
	chunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(fileToAppend.Loc * newLastChunkIndex))))
	if err != nil {
		return err
	}

	//Encrypt final chunk using enckey, mackey, and iv
	lastEnckey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Enckey * newLastChunkIndex)))
	lastMackey := make16BytesByte(userlib.Hash(intToByte(fileToAppend.Mackey * newLastChunkIndex)))
	lastIv := userlib.RandomBytes(16)
	chunk := content
	//encryptedChunk := userlib.SymEnc(lastEnckey, lastIv, chunk) // TOOK OUT AES
	encryptedChunk := AES_CTR_ENC(lastEnckey, lastMackey, lastIv, chunk)

	//Save final chunk in datatstore
	userlib.DatastoreSet(chunkUUID, encryptedChunk)

	return nil
}

func (userdata *User) LoadFile(filename string) (content []byte, err error) {
	//Get updated userdata
	userdata, _ = GetUser(userdata.Username, userdata.Password)

	//Initialize ret, place to put file contents
	ret := []byte{}

	//Chunksize
	chunkSize := 18

	//Case 1: File is in OwnedFilesList
	if _, exists := userdata.OwnedFilesList[filename]; exists {
		//Get file from OwnedFilesList
		file := userdata.OwnedFilesList[filename]

		//Grab fileInfo. Will need it to get filesize
		fileInfo := grabFileInfo(file.Loc)

		//Create variables numChunk using file.Filesize
		numChunks := fileInfo.Filesize / chunkSize

		//Create for loop from 1 to numChunks + 1
		for currChunk := 1; currChunk < numChunks+1; currChunk++ {
			//Recreate chunkUUID
			chunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(file.Loc * currChunk))))
			if err != nil {
				return ret, err
			}

			//Get chunk using chunkUUID from datastore
			chunkEnc, ok := userlib.DatastoreGet(chunkUUID)
			if !ok {
				return ret, err
			}

			//Decrypt chunk using AES_CTR_DEC
			enckey := make16BytesByte(userlib.Hash(intToByte(file.Enckey * currChunk)))
			mackey := make16BytesByte(userlib.Hash(intToByte(file.Mackey * currChunk)))
			chunkDec, err := AES_CTR_DEC(enckey, mackey, chunkEnc)
			if err != nil {
				return ret, err
			}

			//Append decrypted chunk to ret
			ret = append(ret, chunkDec...)
		}
		//If file.Fizesize % 16 > 0, load leftover bytes
		if fileInfo.Filesize%chunkSize > 0 {
			//Recreate chunkUUID using chunkIndex = numChunks + 1
			lastChunkIndex := numChunks + 1
			chunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(file.Loc * lastChunkIndex))))
			if err != nil {
				return ret, err
			}

			//Get chunk using chunnkUUID from datastore
			chunkEnc, ok := userlib.DatastoreGet(chunkUUID)
			if !ok {
				return ret, err
			}

			//Decrypt chunk using AES_CTR_DEC
			enckey := make16BytesByte(userlib.Hash(intToByte(file.Enckey * (numChunks + 1))))
			mackey := make16BytesByte(userlib.Hash(intToByte(file.Mackey * (numChunks + 1))))
			chunkDec, err := AES_CTR_DEC(enckey, mackey, chunkEnc)
			if err != nil {
				return ret, err
			}

			//Append decrypted chunk to ret
			ret = append(ret, chunkDec...)
		}
	} else if _, exists := userdata.AccessibleFilesList[filename]; exists { //Case 2: File is in AccessibleFilesList
		//Decrypt and unmarshall invitation, set fileToShare to it
		invitationPtr := userdata.AccessibleFilesList[filename]
		inviteBytes, ok := userlib.DatastoreGet(invitationPtr)
		if !ok {
			return ret, errors.New("You do not have access to this file")
		}

		//Remove signature
		inviteBytes = inviteBytes[:len(inviteBytes)-256]

		inviteDec, err := userlib.PKEDec(userdata.RSAPrivateKey, inviteBytes)
		if err != nil {
			return ret, err
		}
		invite := new(Invitation)
		json.Unmarshal(inviteDec, &invite)

		//Set fileToShare to it
		file := invite

		//Grab fileInfo. Will need it to get filesize
		fileInfo := grabFileInfo(file.Loc)

		//Create variables numChunk using file.Filesize
		numChunks := fileInfo.Filesize / chunkSize

		//Create for loop from 1 to numChunks + 1
		for currChunk := 1; currChunk < numChunks+1; currChunk++ {
			//Recreate chunkUUID
			chunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(file.Loc * currChunk))))
			if err != nil {
				return ret, err
			}

			//Get chunk using chunkUUID from datastore
			chunkEnc, ok := userlib.DatastoreGet(chunkUUID)
			if !ok {
				return ret, err
			}

			//Decrypt chunk using AES_CTR_DEC
			enckey := make16BytesByte(userlib.Hash(intToByte(file.Enckey * currChunk)))
			mackey := make16BytesByte(userlib.Hash(intToByte(file.Mackey * currChunk)))
			chunkDec, err := AES_CTR_DEC(enckey, mackey, chunkEnc)
			if err != nil {
				return ret, err
			}

			//Append decrypted chunk to ret
			ret = append(ret, chunkDec...)
		}
		if fileInfo.Filesize%chunkSize > 0 {
			//Recreate chunkUUID using chunkIndex = numChunks + 1
			chunkUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash(intToByte(file.Loc * (numChunks + 1)))))
			if err != nil {
				return ret, err
			}

			//Get chunk using chunnkUUID from datastore
			chunkEnc, ok := userlib.DatastoreGet(chunkUUID)
			if !ok {
				return ret, err
			}

			//Decrypt chunk using AES_CTR_DEC
			enckey := make16BytesByte(userlib.Hash(intToByte(file.Enckey * (numChunks + 1))))
			mackey := make16BytesByte(userlib.Hash(intToByte(file.Mackey * (numChunks + 1))))
			chunkDec, err := AES_CTR_DEC(enckey, mackey, chunkEnc)
			if err != nil {
				return ret, err
			}

			//Append decrypted chunk to ret
			ret = append(ret, chunkDec...)
		}
	} else {
		return ret, errors.New("The given filename does not exist in the personal file namespace of the caller")
	}
	return ret, nil
}

func (userdata *User) CreateInvitation(filename string, recipientUsername string) (invitationPtr uuid.UUID, err error) {
	//Get most recent userdata
	userdata, _ = GetUser(userdata.Username, userdata.Password)

	//Get recipients public RSA key
	pubKey, ok := userlib.KeystoreGet(recipientUsername)
	if !ok {
		return uuid.Nil, errors.New("recipient doesn't exist")
	}

	//Create inviteUUID
	hashedInviteUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash([]byte(filename + recipientUsername + userdata.Username))))
	if err != nil {
		return hashedInviteUUID, err
	}

	//get fileToShare, either an OwnedFile or AccessibleFileList
	if _, exists := userdata.OwnedFilesList[filename]; exists {
		//Set fileToShare to it
		fileToShare := userdata.OwnedFilesList[filename]

		//Get original fileName
		fileInfo := grabFileInfo(fileToShare.Loc)
		hashedInviteUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash([]byte(fileInfo.Filename + recipientUsername + userdata.Username))))
		if err != nil {
			return hashedInviteUUID, err
		}

		//Update fileInfo
		fileInfo.Shared_map[userdata.Username] = append(fileInfo.Shared_map[userdata.Username], recipientUsername)
		updateFileInfo(fileInfo, fileToShare.Loc)

		//Create a new invitation using the fields of the fileToShare
		newInvitation := new(Invitation)
		newInvitation.Loc = fileToShare.Loc
		newInvitation.Enckey = fileToShare.Enckey
		newInvitation.Mackey = fileToShare.Mackey
		newInvitation.Sender = userdata.Username

		//Marhsall the invitation, then encrypt it using pubKey
		inviteBytes, err := json.Marshal(newInvitation)
		if err != nil {
			return hashedInviteUUID, err
		}
		inviteEnc, err := userlib.PKEEnc(pubKey, inviteBytes)
		if err != nil {
			return hashedInviteUUID, err
		}

		//Sign invitation
		signature, _ := userlib.DSSign(userdata.DSPrivateKey, inviteEnc)
		inviteEnc = append(inviteEnc, signature...)

		//Store it in Datastore
		userlib.DatastoreSet(hashedInviteUUID, inviteEnc)

		//Return the UUID
		return hashedInviteUUID, nil
	} else if _, exists := userdata.AccessibleFilesList[filename]; exists {
		//Decrypt and unmarshall invitation, set fileToShare to it
		inviteBytes, ok := userlib.DatastoreGet(userdata.AccessibleFilesList[filename])

		//Remove signature
		inviteBytes = inviteBytes[:len(inviteBytes)-256]

		if !ok {
			return hashedInviteUUID, errors.New("counldn't get the file")
		}
		inviteDec, err := userlib.PKEDec(userdata.RSAPrivateKey, inviteBytes)
		if err != nil {
			return hashedInviteUUID, errors.New("Problem with PKEDec")
		}
		invite := new(Invitation)
		json.Unmarshal(inviteDec, &invite)

		//Set fileToShare to it
		fileToShare := invite

		//Get original fileName
		fileInfo := grabFileInfo(fileToShare.Loc)
		hashedInviteUUID, err := uuid.FromBytes(make16BytesByte(userlib.Hash([]byte(fileInfo.Filename + recipientUsername + userdata.Username))))
		if err != nil {
			return hashedInviteUUID, err
		}

		//Update fileInfo
		fileInfo.Shared_map[userdata.Username] = append(fileInfo.Shared_map[userdata.Username], recipientUsername)
		updateFileInfo(fileInfo, fileToShare.Loc)

		//Create a new invitation using the fields of the fileToShare
		newInvitation := new(Invitation)
		newInvitation.Loc = fileToShare.Loc
		newInvitation.Enckey = fileToShare.Enckey
		newInvitation.Mackey = fileToShare.Mackey
		newInvitation.Sender = userdata.Username

		//Marhsall the invitation, then encrypt it using pubKey
		newInviteBytes, err := json.Marshal(newInvitation)
		if err != nil {
			return hashedInviteUUID, err
		}
		inviteEnc, err := userlib.PKEEnc(pubKey, newInviteBytes)
		if err != nil {
			return hashedInviteUUID, err
		}

		//Sign invitation
		signature, _ := userlib.DSSign(userdata.DSPrivateKey, inviteEnc)
		inviteEnc = append(inviteEnc, signature...)

		//Store it in Datastore
		userlib.DatastoreSet(hashedInviteUUID, inviteEnc)

		//Return the UUID
		return hashedInviteUUID, nil
	} else {
		//Return error if not in OwnedFile or AccessibleFiles
		return hashedInviteUUID, errors.New("The given filename does not exist in the personal file namespace of the caller")
	}
}

func (userdata *User) AcceptInvitation(senderUsername string, invitationPtr uuid.UUID, filename string) error {
	//Get most recent userdata
	userdata, _ = GetUser(userdata.Username, userdata.Password)
	if userdata == nil {
		return errors.New("user doesn't exist")
	}

	//Add invitationPtr to user's AccessibleFilesList and update user
	if userdata.AccessibleFilesList[filename] == invitationPtr {
		return errors.New("The user already has a file with the chosen filename in their personal files")
	}

	userdata.AccessibleFilesList[filename] = invitationPtr
	updateUser(*userdata)

	//Ensure integrity
	inviteBytes, ok := userlib.DatastoreGet(userdata.AccessibleFilesList[filename])
	if !ok {
		return errors.New("Access to file lost")
	}

	//Get signature and verify
	signature := inviteBytes[len(inviteBytes)-256:]
	inviteBytes = inviteBytes[:len(inviteBytes)-256]
	DSPublicKey, _ := userlib.KeystoreGet("FRAN" + senderUsername)
	err := userlib.DSVerify(DSPublicKey, inviteBytes, signature)
	if err != nil {
		return errors.New("Signature doesn't match")
	}

	//Decrypt and unmarshal invitation
	if !ok {
		return errors.New("invitation is no longer valid")
	}
	inviteDec, err := userlib.PKEDec(userdata.RSAPrivateKey, inviteBytes)
	if err != nil {
		return err
	}
	invite := new(Invitation)
	json.Unmarshal(inviteDec, &invite)

	//new_mac := make16BytesByte(userlib.Hash(intToByte(invite.Mackey + invite.Enckey)))
	//if !userlib.HMACEqual(mac, new_mac) {
	//	return errors.New("Mac doesn't match")
	//}

	_, ok = userlib.KeystoreGet(invite.Sender)
	if !ok {
		return errors.New("Sender doesn't exist")
	}

	//Return no error
	return nil
}

func (userdata *User) RevokeAccess(filename string, recipientUsername string) error {
	//IDEAS
	//1. Should I encrypt the invitation using both their public key, and then again with my public key?
	//	This way we both have access to the invitaton.
	userdata, _ = GetUser(userdata.Username, userdata.Password)

	//Ensure User owns file
	if _, exists := userdata.OwnedFilesList[filename]; !exists {
		return errors.New("The given filename does not exist in the caller’s personal file namespace")
	}

	//Grab fileInfo
	fileToAppend := userdata.OwnedFilesList[filename]
	fileInfo := grabFileInfo(fileToAppend.Loc)

	//Load file
	fileContents, _ := userdata.LoadFile(filename)

	//Store file
	err := userdata.StoreFile(filename, fileContents)
	if err != nil {
		return err
	}

	//Create accessList
	accessList := getAccessList(fileInfo, userdata.Username, recipientUsername, false)

	alreadyAccessed := make(map[string]struct{})
	for _, sender := range accessList {
		p := new(Invitation)
		p.Enckey = userdata.OwnedFilesList[filename].Enckey
		p.Mackey = userdata.OwnedFilesList[filename].Mackey
		p.Loc = userdata.OwnedFilesList[filename].Loc
		for _, receiver := range fileInfo.Shared_map[sender] {
			if _, exists := alreadyAccessed[receiver]; !exists {
				if receiver != recipientUsername {
					pubKey, _ := userlib.KeystoreGet(receiver)
					inviteBytes, err := json.Marshal(p)
					if err != nil {
						return err
					}
					inviteEnc, err := userlib.PKEEnc(pubKey, inviteBytes)
					if err != nil {
						return err
					}
					InviteUUID, _ := uuid.FromBytes(make16BytesByte(userlib.Hash([]byte(filename + receiver + sender))))
					userlib.DatastoreSet(InviteUUID, inviteEnc)
					alreadyAccessed[receiver] = struct{}{}
				}
			}
		}
	}
	//Remove access from revoked_users
	to_revoke := getAccessList(fileInfo, userdata.Username, "", true)
	if !contains(to_revoke, recipientUsername) {
		return errors.New("The given filename is not currently shared with recipientUsername ")
	}
	bobInviteUUID, _ := uuid.FromBytes(userlib.Hash([]byte(filename + recipientUsername + userdata.Username))[:16])
	//userlib.DatastoreSet(bobInviteUUID, nil)
	userlib.DatastoreDelete(bobInviteUUID)
	for _, sender := range to_revoke {
		for _, receiver := range fileInfo.Shared_map[sender] {
			bobInviteUUID, _ = uuid.FromBytes(make16BytesByte(userlib.Hash([]byte(filename + receiver + sender))))
			//userlib.DatastoreSet(bobInviteUUID, nil)
			userlib.DatastoreDelete(bobInviteUUID)
			delete(fileInfo.Shared_map, sender)
			updateFileInfo(fileInfo, fileToAppend.Loc)
		}
	}

	return nil
}
